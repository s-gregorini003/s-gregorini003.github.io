<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IoT | Silvio Gregorini</title>
    <link>https://s-gregorini003.github.io/tag/iot/</link>
      <atom:link href="https://s-gregorini003.github.io/tag/iot/index.xml" rel="self" type="application/rss+xml" />
    <description>IoT</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Silvio Gregorini Â© 2021 </copyright><lastBuildDate>Mon, 24 Aug 2020 09:31:28 +0000</lastBuildDate>
    <image>
      <url>https://s-gregorini003.github.io/media/icon_hu76721c03fc171c0ca1baef7228ea0fa8_24005_512x512_fill_lanczos_center_2.png</url>
      <title>IoT</title>
      <link>https://s-gregorini003.github.io/tag/iot/</link>
    </image>
    
    <item>
      <title>Send Large JSON Data to IoT Hub Using MQTT</title>
      <link>https://s-gregorini003.github.io/post/large-json-data/</link>
      <pubDate>Mon, 24 Aug 2020 09:31:28 +0000</pubDate>
      <guid>https://s-gregorini003.github.io/post/large-json-data/</guid>
      <description>&lt;p&gt;This article is to demonstrate how to program an Arduino Nano 33 IoT board to communicate with Microsoft Azure. With a quick Google search, you would find out that there&amp;rsquo;s already a library with all the functions required to share messages between Azure and Arduino boards. It is called  &lt;a href=&#34;https://github.com/Azure/azure-iot-arduino&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AzureIoTHub&lt;/a&gt; and is the IoT Hub&amp;rsquo;s official Arduino library, published by Azure as a port of the &lt;a href=&#34;https://github.com/Azure/azure-iot-sdk-c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microsoft Azure IoT device SDK for C&lt;/a&gt;). The problem is that it doesn&amp;rsquo;t actually support any Arduino board. Looking at the &lt;code&gt;README.md&lt;/code&gt; file, the hardware currently supported is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ESP8266 based boards with &lt;a href=&#34;https://github.com/esp8266/arduino&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;esp8266/arduino&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SparkFun &lt;a href=&#34;https://www.sparkfun.com/products/13711&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Thing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adafruit &lt;a href=&#34;https://www.adafruit.com/products/2821&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Feather Huzzah&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ESP32 based boards with &lt;a href=&#34;https://github.com/espressif/arduino-esp32&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;espressif/arduino-esp32&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adafruit &lt;a href=&#34;https://www.adafruit.com/product/3405&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HUZZAH32&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, until the next compatibility update, the only way to send telemetry from a Nano 33 IoT to Azure IoT Hub is through third-party libraries.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;To code my workaround, I used the following libraries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://arduinojson.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ArduinoJson&lt;/a&gt; - To encapsulate my data in a JSON message, one of the formats accepted by IoT Hub;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/arduino-libraries/WiFiNINA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WiFiNINA&lt;/a&gt; - To connect the board to the WiFi;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/arduino-libraries/ArduinoMqttClient&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ArduinoMqttClient&lt;/a&gt; - Client that allows to send and receive MQTT messages;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/arduino-libraries/ArduinoBearSSL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ArduinoBearSSL&lt;/a&gt; - Port of &lt;a href=&#34;https://bearssl.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BearSSL&lt;/a&gt; to Arduino, to implement the SSL/TLS protocol;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/arduino-libraries/ArduinoECCX08&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ArduinoECCX08&lt;/a&gt; - Library for the Atmel/Microchip ECC508 and ECC608 crypto chips, used for authentication with IoT Hub with a SelfSigned X.509 certificate;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All libraries must be installed on your system before compiling the code (instructions on how to install Arduino libraries can be found &lt;a href=&#34;https://www.arduino.cc/en/guide/libraries&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;
&lt;p&gt;Unfortunately, it&amp;rsquo;s not that easy. Turns out that in the first version of my code, I could successfully send short messages over &lt;code&gt;Serial&lt;/code&gt; and &lt;code&gt;MQTT&lt;/code&gt;. But, when I tried to send a JSON text bigger than 256 Bytes (i.e. longer than 256 characters), it arrived at the Hub truncated.&lt;/p&gt;














&lt;figure  id=&#34;figure-screenshot-of-the-azure-cloud-shell-when-receiving-a-truncated-message&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s-gregorini003.github.io/post/large-json-data/monitor-events-NOT-WORKING.png&#34; alt=&#34;Screenshot of the Azure Cloud Shell when receiving a truncated message.&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Screenshot of the Azure Cloud Shell when receiving a truncated message.
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;A similar issue is documented &lt;a href=&#34;https://github.com/firedog1024/mkr1000-iotc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;, using a different library for the MQTT client. In that case, the advised solution is to change the value &lt;code&gt;ENTER VALUE TO CHANGE&lt;/code&gt; from &lt;code&gt;256&lt;/code&gt; to &lt;code&gt;2048&lt;/code&gt;, but that implies the following things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you&amp;rsquo;d have to edit the library source code, so your program is not reproducible on other systems;&lt;/li&gt;
&lt;li&gt;you still set a fixed value, which, even if bigger, it&amp;rsquo;s not scalable.&lt;/li&gt;
&lt;/ul&gt;














&lt;figure  id=&#34;figure-azure-cloud-shell-when-the-hub-is-receiving-the-correct-message&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s-gregorini003.github.io/post/large-json-data/monitor-events-NOT-WORKING.png&#34; alt=&#34;Azure Cloud Shell when the hub is receiving the correct message.&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Azure Cloud Shell when the hub is receiving the correct message.
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Instead, the solution explained here doesn&amp;rsquo;t require any modification of the libraries&#39; source code, since all the changes are made inside the sketch. Concretely, in the &lt;code&gt;publishMessage()&lt;/code&gt; function, we declare the char array named &lt;code&gt;payload&lt;/code&gt;, which acts as a temporary buffer to store the JSON document. Then, using &lt;code&gt;serializeJson()&lt;/code&gt;, the document is serialized to the buffer and the function returns the number of bytes written, which is stored in &lt;code&gt;payloadSize&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;char payload[1024]; // length of the char buffer that contains the JSON file, concretely the number of characters included in one message
size_t payloadSize = serializeJson(doc, payload);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have the message and its size, we can send it via MQTT protocol to the IoT Hub. Through the overloaded function &lt;code&gt;beginMessage()&lt;/code&gt; we pass the topic and the message size. Then, using the &lt;code&gt;Print&lt;/code&gt; class implemented in ArduinoMqttClient, the JSON document is passed directly in the message body. Finally, the &lt;code&gt;endMessage()&lt;/code&gt; function publishes the document to the specified topic.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// send message, the Print interface can be used to set the message contents
mqttClient.beginMessage(&amp;quot;devices/&amp;quot; + deviceId + &amp;quot;/messages/events/&amp;quot;, static_cast&amp;lt;unsigned long&amp;gt;(payloadSize));
mqttClient.print(payload);
mqttClient.endMessage();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The complete function, as found in the example code, is the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void publishMessage() {
  Serial.println(&amp;quot;Publishing message&amp;quot;);
  
  const int capacity = JSON_ARRAY_SIZE(10) + 10*JSON_OBJECT_SIZE(2)+ JSON_OBJECT_SIZE(3) + 280;     // Calculation of the JSON doc size, as explained in the documentation

/*  
Here is where you should write the body of your message. In this example, the JSON doc is purposely longer than 256 characters, to highlight the issue.
*/

  StaticJsonDocument&amp;lt;capacity&amp;gt; doc;
  doc[&amp;quot;topic&amp;quot;] = &amp;quot;messageTopic&amp;quot;;  
  doc[&amp;quot;deviceId&amp;quot;] = deviceId;
  JsonArray data = doc.createNestedArray(&amp;quot;data&amp;quot;);
  JsonObject data_0 = data.createNestedObject();
  data_0[&amp;quot;label&amp;quot;] = &amp;quot;Ankara&amp;quot;;
  data_0[&amp;quot;state&amp;quot;] = true;
  JsonObject data_1 = data.createNestedObject();
  data_1[&amp;quot;label&amp;quot;] = &amp;quot;Beirut&amp;quot;;
  data_1[&amp;quot;state&amp;quot;] = true;
  JsonObject data_2 = data.createNestedObject();
  data_2[&amp;quot;label&amp;quot;] = &amp;quot;Cincinnati&amp;quot;;
  data_2[&amp;quot;state&amp;quot;] = false;
  JsonObject data_3 = data.createNestedObject();
  data_3[&amp;quot;label&amp;quot;] = &amp;quot;Detroit&amp;quot;;
  data_3[&amp;quot;state&amp;quot;] = false;
  JsonObject data_4 = data.createNestedObject();
  data_4[&amp;quot;label&amp;quot;] = &amp;quot;Eindhoven&amp;quot;;
  data_4[&amp;quot;state&amp;quot;] = true;
  JsonObject data_5 = data.createNestedObject();
  data_5[&amp;quot;label&amp;quot;] = &amp;quot;Fresno&amp;quot;;
  data_5[&amp;quot;state&amp;quot;] = false;
  JsonObject data_6 = data.createNestedObject();
  data_6[&amp;quot;label&amp;quot;] = &amp;quot;Genoa&amp;quot;;
  data_6[&amp;quot;state&amp;quot;] = false;
  JsonObject data_7 = data.createNestedObject();
  data_7[&amp;quot;label&amp;quot;] = &amp;quot;Huddersfield&amp;quot;;
  data_7[&amp;quot;state&amp;quot;] = true;
  JsonObject data_8 = data.createNestedObject();
  data_8[&amp;quot;label&amp;quot;] = &amp;quot;Istanbul&amp;quot;;
  data_8[&amp;quot;state&amp;quot;] = true;
  JsonObject data_9 = data.createNestedObject();
  data_9[&amp;quot;label&amp;quot;] = &amp;quot;Jakarta&amp;quot;;
  data_9[&amp;quot;state&amp;quot;] = false;
  

//   DEBUG - serialize the document in the serial monitor
//   serializeJson(doc, Serial);
//   Serial.println(&amp;quot; &amp;quot;);
  
  char payload[1024]; // length of the char buffer that contains the JSON file, concretely the number of characters included in one message
  size_t payloadSize = serializeJson(doc, payload);

//   DEBUG - write the size of the serialized document
//   Serial.print(&amp;quot;json size:&amp;quot;);
//   Serial.println(payloadSize);
  
// send message, the Print interface can be used to set the message contents
  mqttClient.beginMessage(&amp;quot;devices/&amp;quot; + deviceId + &amp;quot;/messages/events/&amp;quot;, static_cast&amp;lt;unsigned long&amp;gt;(payloadSize));
  mqttClient.print(payload);
  mqttClient.endMessage();
/*  
To replicate the issue, uncomment the following 3 lines and comment the 3 above. This way you&#39;ll only be able to send MQTT messages smaller than 256 Bytes.
*/
//  mqttClient.beginMessage(&amp;quot;devices/&amp;quot; + deviceId + &amp;quot;/messages/events/&amp;quot;);
//  serializeJson(doc, mqttClient);
//  mqttClient.endMessage();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function above creates a JSON document as follows. Obviously, it can be changed as needed, this is an example to highlight the issue, since the text is longer than 256 characters.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;topic&amp;quot;: &amp;quot;messageTopic&amp;quot;,
  &amp;quot;deviceId&amp;quot;: &amp;quot;deviceId&amp;quot;,
  &amp;quot;data&amp;quot;: [
    {
     &amp;quot;label&amp;quot;: &amp;quot;Ankara&amp;quot;,
     &amp;quot;state&amp;quot;: true
    },
    {
     &amp;quot;label&amp;quot;: &amp;quot;Beirut&amp;quot;,
     &amp;quot;state&amp;quot;: true
    },
    {
     &amp;quot;label&amp;quot;: &amp;quot;Cincinnati&amp;quot;,
     &amp;quot;state&amp;quot;: false
    },
    {
     &amp;quot;label&amp;quot;: &amp;quot;Detroit&amp;quot;,
     &amp;quot;state&amp;quot;: false
    },
    {
     &amp;quot;label&amp;quot;: &amp;quot;Eindhoven&amp;quot;,
     &amp;quot;state&amp;quot;: true
    },
    {
     &amp;quot;label&amp;quot;: &amp;quot;Fresno&amp;quot;,
     &amp;quot;state&amp;quot;: false
    },
    {
     &amp;quot;label&amp;quot;: &amp;quot;Genoa&amp;quot;,
     &amp;quot;state&amp;quot;: false
    },
    {
     &amp;quot;label&amp;quot;: &amp;quot;Huddersfield&amp;quot;,
     &amp;quot;state&amp;quot;: true
    },
    {
     &amp;quot;label&amp;quot;: &amp;quot;Istanbul&amp;quot;,
     &amp;quot;state&amp;quot;: true
    },
    {
     &amp;quot;label&amp;quot;: &amp;quot;Jakarta&amp;quot;,
     &amp;quot;state&amp;quot;: false
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;I hope that this post was helpful. I uploaded an example of the code to send large JSON data from an Arduino Nano 33 IoT to Azure IoT Hub to a &lt;a href=&#34;https://github.com/s-gregorini003/azure-iot-arduino-nano-33-iot.git&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub repository&lt;/a&gt;. Follow the instructions in the &lt;code&gt;README.md&lt;/code&gt; to configure it properly. Feel free to use it, modify it and extend it as you like. Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
