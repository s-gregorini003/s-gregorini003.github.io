<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Silvio Gregorini</title>
    <link>https://s-gregorini003.github.io/post/</link>
      <atom:link href="https://s-gregorini003.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Silvio Gregorini Â© 2021 </copyright><lastBuildDate>Mon, 24 Aug 2020 09:31:28 +0000</lastBuildDate>
    <image>
      <url>https://s-gregorini003.github.io/media/icon_hu76721c03fc171c0ca1baef7228ea0fa8_24005_512x512_fill_lanczos_center_2.png</url>
      <title>Posts</title>
      <link>https://s-gregorini003.github.io/post/</link>
    </image>
    
    <item>
      <title>Send Large JSON Data to IoT Hub Using MQTT</title>
      <link>https://s-gregorini003.github.io/post/large-json-data/</link>
      <pubDate>Mon, 24 Aug 2020 09:31:28 +0000</pubDate>
      <guid>https://s-gregorini003.github.io/post/large-json-data/</guid>
      <description>&lt;p&gt;This article is to demonstrate how to program an Arduino Nano 33 IoT board to communicate with Microsoft Azure. With a quick Google search, you would find out that there&amp;rsquo;s already a library with all the functions required to share messages between Azure and Arduino boards. It is called  &lt;a href=&#34;https://github.com/Azure/azure-iot-arduino&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AzureIoTHub&lt;/a&gt; and is the IoT Hub&amp;rsquo;s official Arduino library, published by Azure as a port of the &lt;a href=&#34;https://github.com/Azure/azure-iot-sdk-c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microsoft Azure IoT device SDK for C&lt;/a&gt;). The problem is that it doesn&amp;rsquo;t actually support any Arduino board. Looking at the &lt;code&gt;README.md&lt;/code&gt; file, the hardware currently supported is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ESP8266 based boards with &lt;a href=&#34;https://github.com/esp8266/arduino&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;esp8266/arduino&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SparkFun &lt;a href=&#34;https://www.sparkfun.com/products/13711&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Thing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adafruit &lt;a href=&#34;https://www.adafruit.com/products/2821&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Feather Huzzah&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ESP32 based boards with &lt;a href=&#34;https://github.com/espressif/arduino-esp32&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;espressif/arduino-esp32&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adafruit &lt;a href=&#34;https://www.adafruit.com/product/3405&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HUZZAH32&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, until the next compatibility update, the only way to send telemetry from a Nano 33 IoT to Azure IoT Hub is through third-party libraries.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;To code my workaround, I used the following libraries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://arduinojson.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ArduinoJson&lt;/a&gt; - To encapsulate my data in a JSON message, one of the formats accepted by IoT Hub;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/arduino-libraries/WiFiNINA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WiFiNINA&lt;/a&gt; - To connect the board to the WiFi;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/arduino-libraries/ArduinoMqttClient&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ArduinoMqttClient&lt;/a&gt; - Client that allows to send and receive MQTT messages;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/arduino-libraries/ArduinoBearSSL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ArduinoBearSSL&lt;/a&gt; - Port of &lt;a href=&#34;https://bearssl.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BearSSL&lt;/a&gt; to Arduino, to implement the SSL/TLS protocol;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/arduino-libraries/ArduinoECCX08&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ArduinoECCX08&lt;/a&gt; - Library for the Atmel/Microchip ECC508 and ECC608 crypto chips, used for authentication with IoT Hub with a SelfSigned X.509 certificate;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All libraries must be installed on your system before compiling the code (instructions on how to install Arduino libraries can be found &lt;a href=&#34;https://www.arduino.cc/en/guide/libraries&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;
&lt;p&gt;Unfortunately, it&amp;rsquo;s not that easy. Turns out that in the first version of my code, I could successfully send short messages over &lt;code&gt;Serial&lt;/code&gt; and &lt;code&gt;MQTT&lt;/code&gt;. But, when I tried to send a JSON text bigger than 256 Bytes (i.e. longer than 256 characters), it arrived at the Hub truncated.&lt;/p&gt;














&lt;figure  id=&#34;figure-screenshot-of-the-azure-cloud-shell-when-receiving-a-truncated-message&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s-gregorini003.github.io/post/large-json-data/monitor-events-NOT-WORKING.png&#34; alt=&#34;Screenshot of the Azure Cloud Shell when receiving a truncated message.&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Screenshot of the Azure Cloud Shell when receiving a truncated message.
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;A similar issue is documented &lt;a href=&#34;https://github.com/firedog1024/mkr1000-iotc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;, using a different library for the MQTT client. In that case, the advised solution is to change the value &lt;code&gt;ENTER VALUE TO CHANGE&lt;/code&gt; from &lt;code&gt;256&lt;/code&gt; to &lt;code&gt;2048&lt;/code&gt;, but that implies the following things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you&amp;rsquo;d have to edit the library source code, so your program is not reproducible on other systems;&lt;/li&gt;
&lt;li&gt;you still set a fixed value, which, even if bigger, it&amp;rsquo;s not scalable.&lt;/li&gt;
&lt;/ul&gt;














&lt;figure  id=&#34;figure-azure-cloud-shell-when-the-hub-is-receiving-the-correct-message&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s-gregorini003.github.io/post/large-json-data/monitor-events-NOT-WORKING.png&#34; alt=&#34;Azure Cloud Shell when the hub is receiving the correct message.&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Azure Cloud Shell when the hub is receiving the correct message.
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Instead, the solution explained here doesn&amp;rsquo;t require any modification of the libraries&#39; source code, since all the changes are made inside the sketch. Concretely, in the &lt;code&gt;publishMessage()&lt;/code&gt; function, we declare the char array named &lt;code&gt;payload&lt;/code&gt;, which acts as a temporary buffer to store the JSON document. Then, using &lt;code&gt;serializeJson()&lt;/code&gt;, the document is serialized to the buffer and the function returns the number of bytes written, which is stored in &lt;code&gt;payloadSize&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;char payload[1024]; // length of the char buffer that contains the JSON file, concretely the number of characters included in one message
size_t payloadSize = serializeJson(doc, payload);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have the message and its size, we can send it via MQTT protocol to the IoT Hub. Through the overloaded function &lt;code&gt;beginMessage()&lt;/code&gt; we pass the topic and the message size. Then, using the &lt;code&gt;Print&lt;/code&gt; class implemented in ArduinoMqttClient, the JSON document is passed directly in the message body. Finally, the &lt;code&gt;endMessage()&lt;/code&gt; function publishes the document to the specified topic.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// send message, the Print interface can be used to set the message contents
mqttClient.beginMessage(&amp;quot;devices/&amp;quot; + deviceId + &amp;quot;/messages/events/&amp;quot;, static_cast&amp;lt;unsigned long&amp;gt;(payloadSize));
mqttClient.print(payload);
mqttClient.endMessage();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The complete function, as found in the example code, is the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void publishMessage() {
  Serial.println(&amp;quot;Publishing message&amp;quot;);
  
  const int capacity = JSON_ARRAY_SIZE(10) + 10*JSON_OBJECT_SIZE(2)+ JSON_OBJECT_SIZE(3) + 280;     // Calculation of the JSON doc size, as explained in the documentation

/*  
Here is where you should write the body of your message. In this example, the JSON doc is purposely longer than 256 characters, to highlight the issue.
*/

  StaticJsonDocument&amp;lt;capacity&amp;gt; doc;
  doc[&amp;quot;topic&amp;quot;] = &amp;quot;messageTopic&amp;quot;;  
  doc[&amp;quot;deviceId&amp;quot;] = deviceId;
  JsonArray data = doc.createNestedArray(&amp;quot;data&amp;quot;);
  JsonObject data_0 = data.createNestedObject();
  data_0[&amp;quot;label&amp;quot;] = &amp;quot;Ankara&amp;quot;;
  data_0[&amp;quot;state&amp;quot;] = true;
  JsonObject data_1 = data.createNestedObject();
  data_1[&amp;quot;label&amp;quot;] = &amp;quot;Beirut&amp;quot;;
  data_1[&amp;quot;state&amp;quot;] = true;
  JsonObject data_2 = data.createNestedObject();
  data_2[&amp;quot;label&amp;quot;] = &amp;quot;Cincinnati&amp;quot;;
  data_2[&amp;quot;state&amp;quot;] = false;
  JsonObject data_3 = data.createNestedObject();
  data_3[&amp;quot;label&amp;quot;] = &amp;quot;Detroit&amp;quot;;
  data_3[&amp;quot;state&amp;quot;] = false;
  JsonObject data_4 = data.createNestedObject();
  data_4[&amp;quot;label&amp;quot;] = &amp;quot;Eindhoven&amp;quot;;
  data_4[&amp;quot;state&amp;quot;] = true;
  JsonObject data_5 = data.createNestedObject();
  data_5[&amp;quot;label&amp;quot;] = &amp;quot;Fresno&amp;quot;;
  data_5[&amp;quot;state&amp;quot;] = false;
  JsonObject data_6 = data.createNestedObject();
  data_6[&amp;quot;label&amp;quot;] = &amp;quot;Genoa&amp;quot;;
  data_6[&amp;quot;state&amp;quot;] = false;
  JsonObject data_7 = data.createNestedObject();
  data_7[&amp;quot;label&amp;quot;] = &amp;quot;Huddersfield&amp;quot;;
  data_7[&amp;quot;state&amp;quot;] = true;
  JsonObject data_8 = data.createNestedObject();
  data_8[&amp;quot;label&amp;quot;] = &amp;quot;Istanbul&amp;quot;;
  data_8[&amp;quot;state&amp;quot;] = true;
  JsonObject data_9 = data.createNestedObject();
  data_9[&amp;quot;label&amp;quot;] = &amp;quot;Jakarta&amp;quot;;
  data_9[&amp;quot;state&amp;quot;] = false;
  

//   DEBUG - serialize the document in the serial monitor
//   serializeJson(doc, Serial);
//   Serial.println(&amp;quot; &amp;quot;);
  
  char payload[1024]; // length of the char buffer that contains the JSON file, concretely the number of characters included in one message
  size_t payloadSize = serializeJson(doc, payload);

//   DEBUG - write the size of the serialized document
//   Serial.print(&amp;quot;json size:&amp;quot;);
//   Serial.println(payloadSize);
  
// send message, the Print interface can be used to set the message contents
  mqttClient.beginMessage(&amp;quot;devices/&amp;quot; + deviceId + &amp;quot;/messages/events/&amp;quot;, static_cast&amp;lt;unsigned long&amp;gt;(payloadSize));
  mqttClient.print(payload);
  mqttClient.endMessage();
/*  
To replicate the issue, uncomment the following 3 lines and comment the 3 above. This way you&#39;ll only be able to send MQTT messages smaller than 256 Bytes.
*/
//  mqttClient.beginMessage(&amp;quot;devices/&amp;quot; + deviceId + &amp;quot;/messages/events/&amp;quot;);
//  serializeJson(doc, mqttClient);
//  mqttClient.endMessage();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function above creates a JSON document as follows. Obviously, it can be changed as needed, this is an example to highlight the issue, since the text is longer than 256 characters.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;topic&amp;quot;: &amp;quot;messageTopic&amp;quot;,
  &amp;quot;deviceId&amp;quot;: &amp;quot;deviceId&amp;quot;,
  &amp;quot;data&amp;quot;: [
    {
     &amp;quot;label&amp;quot;: &amp;quot;Ankara&amp;quot;,
     &amp;quot;state&amp;quot;: true
    },
    {
     &amp;quot;label&amp;quot;: &amp;quot;Beirut&amp;quot;,
     &amp;quot;state&amp;quot;: true
    },
    {
     &amp;quot;label&amp;quot;: &amp;quot;Cincinnati&amp;quot;,
     &amp;quot;state&amp;quot;: false
    },
    {
     &amp;quot;label&amp;quot;: &amp;quot;Detroit&amp;quot;,
     &amp;quot;state&amp;quot;: false
    },
    {
     &amp;quot;label&amp;quot;: &amp;quot;Eindhoven&amp;quot;,
     &amp;quot;state&amp;quot;: true
    },
    {
     &amp;quot;label&amp;quot;: &amp;quot;Fresno&amp;quot;,
     &amp;quot;state&amp;quot;: false
    },
    {
     &amp;quot;label&amp;quot;: &amp;quot;Genoa&amp;quot;,
     &amp;quot;state&amp;quot;: false
    },
    {
     &amp;quot;label&amp;quot;: &amp;quot;Huddersfield&amp;quot;,
     &amp;quot;state&amp;quot;: true
    },
    {
     &amp;quot;label&amp;quot;: &amp;quot;Istanbul&amp;quot;,
     &amp;quot;state&amp;quot;: true
    },
    {
     &amp;quot;label&amp;quot;: &amp;quot;Jakarta&amp;quot;,
     &amp;quot;state&amp;quot;: false
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;I hope that this post was helpful. I uploaded an example of the code to send large JSON data from an Arduino Nano 33 IoT to Azure IoT Hub to a &lt;a href=&#34;https://github.com/s-gregorini003/azure-iot-arduino-nano-33-iot.git&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub repository&lt;/a&gt;. Follow the instructions in the &lt;code&gt;README.md&lt;/code&gt; to configure it properly. Feel free to use it, modify it and extend it as you like. Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>volca_boy[1] // Initial Design</title>
      <link>https://s-gregorini003.github.io/post/volca-boy-1/</link>
      <pubDate>Sun, 31 May 2020 18:01:50 +0000</pubDate>
      <guid>https://s-gregorini003.github.io/post/volca-boy-1/</guid>
      <description>&lt;blockquote&gt;
&lt;h2 id=&#34;important-notice&#34;&gt;IMPORTANT NOTICE&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Unfortunately, due to the Covid-19 pandemic, this project is currently paused.  The reason is that I had to leave my house in Leeds and temporarily return to my hometown in Italy, leaving most of my stuff in the UK. I really hope to go back as soon as possible and continue this journey.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;do-more-with-less&#34;&gt;Do More, with Less&lt;/h3&gt;
&lt;p&gt;For those unfamiliar with the term, &lt;em&gt;chiptune&lt;/em&gt; (also known as chipmusic, micromusic or 8-bit music) is a style of electronic music derived from the sound chips that, in the first generation of computers and gaming consoles, were used to balance the processing power of generating sound effects and music from the CPU.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The primal micromusic spirit was to overcome limitations and wield them in wildly creative ways. - &lt;a href=&#34;https://twitter.com/fabiobortolotti/status/1267093927800139777&#34; title=&#34;Chiptune is dead. Here&amp;#39;s what I think.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fabio &amp;ldquo;Kenobit&amp;rdquo; Bortolotti&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Like everything nowadays, that definition can be interpreted in many ways. In its strictiest meaning, chiptune is used to refer to music created entirely from the original, vintage audio chips (nevertheless, modifications that do not alter the nature of the sound produced are &amp;ldquo;allowed&amp;rdquo;, but we&amp;rsquo;ll come back to this later). On the other hand, the broadest definition is more related to the aesthetics of the sound, rather then to the source generating it. In general, the philosophy behind the chiptune movement is to exploit the limited resources of the hardware to create more and more articulated music.&lt;/p&gt;
&lt;h3 id=&#34;dmg-01&#34;&gt;DMG-01&lt;/h3&gt;
&lt;p&gt;With its four audio channels, the &lt;em&gt;Game Boy&lt;/em&gt; is supposedly the most popular tool for the production of micromusic. This console has been around for quite some time (Nintendo released it in 1989), and over the course of the years many people created and documented mods to equip it with useful features for the cause, such as better audio, rechargeable battery, backlit screen&amp;hellip;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Channel&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Features&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td&gt;Pulse&lt;/td&gt;
&lt;td&gt;Volume envelope, 4-mode pulse width, frequency register from C3 upwards, frequency envelope&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td&gt;Pulse&lt;/td&gt;
&lt;td&gt;Volume envelope, 4-mode pulse width, frequency register from C3 upwards&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td&gt;Wave&lt;/td&gt;
&lt;td&gt;User-definable waveforms, bank of 32 samples (4-bit each), frequency register from C2 upwards&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td&gt;Noise&lt;/td&gt;
&lt;td&gt;White and brown noise&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;What I want to do with this project is to use some of these mods as a starting point to transform that portable device into a proper music production tool, without over-denaturing its essence.&lt;/p&gt;
&lt;h3 id=&#34;first-design&#34;&gt;First Design&lt;/h3&gt;
&lt;p&gt;Initially, I started this project as a university assignment, which is why I was able to document everything in detail (specifically, in this &lt;a href=&#34;https://github.com/s-gregorini003/interfaces-and-interactivity&#34; title=&#34;Interfaces and Interactivity&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github repo&lt;/a&gt;). Back then, my idea was to tear apart a Game Boy, rewire it from the inside to a different controls and put everything into a new, original case.&lt;/p&gt;














&lt;figure  id=&#34;figure-3d-model-made-with-solidworks-to-show-the-exploded-view-of-the-final-product&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s-gregorini003.github.io/post/volca-boy-1/volca-boy-exploded-view.png&#34; alt=&#34;3D model made with SolidWorks to show the exploded view of the final product.&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      3D model made with SolidWorks to show the exploded view of the final product.
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Unfortunately, towards the end of the semester I realised that creating a custom shell for my product was a task way harder than expected. So, after many stressful weeks, I decided - in accordance with my lecturers - to give up with the enclosure and present only a working prototype. Anyway, the exam went well, but I still want to bring this project to an end.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;p&gt;Collins, K. and Kapralos, B. and Tessler, H. and Paul, J. L. (2014) &lt;em&gt;The Oxford Handbook of Interactive Audio.&lt;/em&gt; Oxford: Oxford University Press.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
